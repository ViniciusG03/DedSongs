// Arquivo: commands/help.js
// Este comando mostra informa√ß√µes sobre todos os comandos dispon√≠veis

const { SlashCommandBuilder, EmbedBuilder } = require("discord.js");

module.exports = {
  data: new SlashCommandBuilder()
    .setName("help")
    .setDescription("Mostra todos os comandos dispon√≠veis e como us√°-los"),

  async execute(interaction) {
    try {
      // Obt√©m lista de todos os comandos dispon√≠veis
      const commands = interaction.client.commands;

      // Cria um embed principal com informa√ß√µes gerais
      const helpEmbed = new EmbedBuilder()
        .setColor("#8F00FF") // Roxo
        .setTitle("üéµ Bot de M√∫sica - Comandos Dispon√≠veis")
        .setDescription(
          "Aqui est√£o todos os comandos que voc√™ pode usar com este bot de m√∫sica. " +
            "Use `/` seguido pelo nome do comando para execut√°-lo."
        )
        .setThumbnail(interaction.client.user.displayAvatarURL())
        .setFooter({
          text: "Bot de M√∫sica para Discord ‚Ä¢ Use /help para ver esta mensagem novamente",
        });

      // Cria categorias para organizar comandos
      const playbackCommands = [];
      const queueCommands = [];
      const infoCommands = [];
      const utilityCommands = [];

      // Classifica cada comando em uma categoria
      commands.forEach((cmd) => {
        const cmdInfo = {
          name: cmd.data.name,
          description: cmd.data.description,
          options: cmd.data.options || [],
        };

        // Classifica com base no nome/fun√ß√£o
        if (
          ["play", "pause", "resume", "skip", "stop"].includes(cmdInfo.name)
        ) {
          playbackCommands.push(cmdInfo);
        } else if (["queue", "volume"].includes(cmdInfo.name)) {
          queueCommands.push(cmdInfo);
        } else if (["nowplaying", "lyrics"].includes(cmdInfo.name)) {
          infoCommands.push(cmdInfo);
        } else {
          // help vai aqui
          utilityCommands.push(cmdInfo);
        }
      });

      // Fun√ß√£o auxiliar para formatar as op√ß√µes do comando
      function formatOptions(options) {
        if (!options || options.length === 0) return "";

        return options
          .map((opt) => {
            const required = opt.required ? "" : " (opcional)";
            return `\`${opt.name}\`: ${opt.description}${required}`;
          })
          .join("\n");
      }

      // Adiciona se√ß√£o de comandos de reprodu√ß√£o
      if (playbackCommands.length > 0) {
        helpEmbed.addFields({
          name: "üéÆ Comandos de Reprodu√ß√£o",
          value: playbackCommands
            .map((cmd) => {
              let value = `*${cmd.description}*\n`;
              if (cmd.options.length > 0) {
                value += "**Par√¢metros:**\n" + formatOptions(cmd.options);
              }
              return `**/${cmd.name}** - ${value}`;
            })
            .join("\n\n"),
        });
      }

      // Adiciona se√ß√£o de comandos de fila
      if (queueCommands.length > 0) {
        helpEmbed.addFields({
          name: "üìã Comandos de Fila",
          value: queueCommands
            .map((cmd) => {
              let value = `*${cmd.description}*\n`;
              if (cmd.options.length > 0) {
                value += "**Par√¢metros:**\n" + formatOptions(cmd.options);
              }
              return `**/${cmd.name}** - ${value}`;
            })
            .join("\n\n"),
        });
      }

      // Adiciona se√ß√£o de comandos de informa√ß√£o
      if (infoCommands.length > 0) {
        helpEmbed.addFields({
          name: "‚ÑπÔ∏è Comandos de Informa√ß√£o",
          value: infoCommands
            .map((cmd) => {
              let value = `*${cmd.description}*\n`;
              if (cmd.options.length > 0) {
                value += "**Par√¢metros:**\n" + formatOptions(cmd.options);
              }
              return `**/${cmd.name}** - ${value}`;
            })
            .join("\n\n"),
        });
      }

      // Adiciona se√ß√£o de comandos utilit√°rios
      if (utilityCommands.length > 0) {
        helpEmbed.addFields({
          name: "üîß Comandos Utilit√°rios",
          value: utilityCommands
            .map((cmd) => {
              let value = `*${cmd.description}*\n`;
              if (cmd.options.length > 0) {
                value += "**Par√¢metros:**\n" + formatOptions(cmd.options);
              }
              return `**/${cmd.name}** - ${value}`;
            })
            .join("\n\n"),
        });
      }

      // Adiciona exemplos de uso para o comando /play
      helpEmbed.addFields({
        name: "üìù Exemplos de Uso",
        value:
          "**Spotify**\n" +
          "`/play consulta:Nome da m√∫sica`\n" +
          "`/play consulta:https://open.spotify.com/track/ID`\n\n" +
          "**YouTube**\n" +
          "`/play consulta:https://www.youtube.com/watch?v=ID`\n" +
          "`/play consulta:Nome da m√∫sica youtube:true`\n\n" +
          "**Controles**\n" +
          "`/pause` - Pausa a m√∫sica atual\n" +
          "`/resume` - Retoma a reprodu√ß√£o\n" +
          "`/skip` - Passa para a pr√≥xima m√∫sica\n" +
          "`/volume porcentagem:80` - Ajusta o volume para 80%",
      });

      await interaction.reply({ embeds: [helpEmbed] });
    } catch (error) {
      console.error("Erro no comando help:", error);
      await interaction.reply({
        content:
          "‚ùå Houve um erro ao exibir a ajuda. Tente novamente mais tarde.",
        ephemeral: true,
      });
    }
  },
};
